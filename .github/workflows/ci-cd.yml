name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api-gateway
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_CHATBOT: ${{ github.repository }}/chatbot
  IMAGE_NAME_DOCUMENT_INBOX: ${{ github.repository }}/document-inbox
  IMAGE_NAME_OCR_PROCESSOR: ${{ github.repository }}/ocr-processor
  IMAGE_NAME_TRANSLATION: ${{ github.repository }}/translation-service

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      env:
        PGPASSWORD: test_password
      run: |
        psql -h localhost -U test_user -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        psql -h localhost -U test_user -d test_db -f database/schema.sql

    - name: Run backend tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret_for_testing_only
        REDIS_URL: redis://localhost:6379
        LLM_MODEL_NAME: microsoft/DialoGPT-small
      run: npm run test:server

    - name: Run workflow integration tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret_for_testing_only
        REDIS_URL: redis://localhost:6379
      run: npm run test:server -- --testPathPattern=workflow --verbose

    - name: Run API integration tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret_for_testing_only
      run: npm run test:server -- --testPathPattern="(digitalReferrals|autoActions)" --verbose

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run frontend tests
      run: npm run test:client

    - name: Test document-inbox service
      working-directory: ./services/document-inbox
      run: |
        npm ci
        npm run test:coverage

    - name: Test ocr-processor service
      working-directory: ./services/ocr-processor
      run: |
        npm ci
        npm run test:coverage

    - name: Setup Python for translation service
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test translation service
      working-directory: ./services/translation-service
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        python -m pytest tests/ --cov=main --cov-report=xml

    - name: Install Playwright
      run: |
        npm install @playwright/test
        npx playwright install chromium

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Build frontend
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile
            image: ${{ env.IMAGE_NAME_API }}
            context: .
          - dockerfile: Dockerfile.frontend
            image: ${{ env.IMAGE_NAME_FRONTEND }}
            context: .
          - dockerfile: Dockerfile.chatbot
            image: ${{ env.IMAGE_NAME_CHATBOT }}
            context: .
          - dockerfile: Dockerfile
            image: ${{ env.IMAGE_NAME_DOCUMENT_INBOX }}
            context: ./services/document-inbox
          - dockerfile: Dockerfile
            image: ${{ env.IMAGE_NAME_OCR_PROCESSOR }}
            context: ./services/ocr-processor
          - dockerfile: Dockerfile
            image: ${{ env.IMAGE_NAME_TRANSLATION }}
            context: ./services/translation-service

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name cma-staging --region eu-west-2

    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|cma/api-gateway:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:develop|g" k8s/api-gateway.yaml
        sed -i "s|cma/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:develop|g" k8s/frontend.yaml
        sed -i "s|cma/chatbot:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CHATBOT }}:develop|g" k8s/chatbot.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/api-gateway.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/chatbot.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/api-gateway -n cma-api --timeout=300s
        kubectl rollout status deployment/frontend -n cma-frontend --timeout=300s
        kubectl rollout status deployment/chatbot -n cma-ai --timeout=300s

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name cma-production --region eu-west-2

    - name: Deploy to production
      run: |
        # Update image tags in manifests
        sed -i "s|cma/api-gateway:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest|g" k8s/api-gateway.yaml
        sed -i "s|cma/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest|g" k8s/frontend.yaml
        sed -i "s|cma/chatbot:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CHATBOT }}:latest|g" k8s/chatbot.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/api-gateway.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/chatbot.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/api-gateway -n cma-api --timeout=600s
        kubectl rollout status deployment/frontend -n cma-frontend --timeout=600s
        kubectl rollout status deployment/chatbot -n cma-ai --timeout=600s

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
